import tkinter as tk
from PIL import Image, ImageColor
from matplotlib.backends.backend_tkagg import (
    FigureCanvasTkAgg, NavigationToolbar2TkAgg)
from matplotlib.figure import Figure
from matplotlib.ticker import FuncFormatter
import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D

class Example(tk.Frame):
    def __init__(self, parent):
        tk.Frame.__init__(self, parent)

        label = tk.Label(self, text="log 文件:")
        label.grid(row=0, rowspan=1, column=0, columnspan=1, sticky=tk.E)

        self.target_log_str = tk.StringVar()
        self.target_log_str.set('')
        target_log = tk.Entry(self, textvariable=self.target_log_str, bg='white', width=80)
        target_log.grid(row=0, column=1, rowspan=1, columnspan=4, sticky=tk.W)

        button1 = tk.Button(self, text="浏览", command=self.onScanFile, width=15)
        button1.grid(row=0, rowspan=1, column=5, columnspan=1, sticky=tk.W+tk.E)

        button2 = tk.Button(self, text="3D", command=self.on3D, width=10)
        button2.grid(row=0, rowspan=1, column=7, columnspan=1, sticky=tk.E, padx=5)
    
    def onScanFile(self):
        '''
        respond for button: 浏览
        you should select one .txt file , which is generated by cpipi PrimerCC_fw
        '''
        ftypes = [('text file', '*.txt *.TXT'), ('All files', '*')]
        dlg = tk.filedialog.Open(self, filetypes = ftypes)#open more than one file
        logFile = dlg.show()
        #print(logFile)
        if logFile=='':#cancle
            return
        self.r_in = []
        self.g_in = []
        self.b_in = []
        self.r_out = []
        self.g_out = []
        self.b_out = []
        self.hue_vec = []
        self.target_log_str.set(logFile)
        if not self.__readGridStat(logFile, self.r_in, self.g_in, self.b_in, self.r_out, self.g_out, self.b_out, self.hue_vec):
            print('read data error !')
            return
        leftimg = Image.new('RGB',(410,310), ImageColor.getrgb('#000000'))
        rightimg = Image.new('RGB', (410,310), ImageColor.getrgb('#000000'))
        for y in range(0,leftimg.size[1]):#行
            for x in range(0,leftimg.size[0]):#列
                leftimg.putpixel((x,y), (self.r_in[y//10][x//10], self.g_in[y//10][x//10], self.b_in[y//10][x//10]))#对每一个像素赋值
                rightimg.putpixel((x,y), (self.r_out[y//10][x//10], self.g_out[y//10][x//10], self.b_out[y//10][x//10]))#对每一个像素赋值)

        leftimgarr = np.fromstring(leftimg.tobytes(), dtype=np.uint8)#转化成np.ndarray用于matplotlib显示
        rightimgarr = np.fromstring(rightimg.tobytes(), dtype=np.uint8)#转化成np.ndarray用于matplotlib显示
        leftimgarr = leftimgarr.reshape((leftimg.size[1], leftimg.size[0], 3))
        rightimgarr = rightimgarr.reshape((rightimg.size[1], rightimg.size[0], 3))
        global globalCell
        globalCell[1].ax.imshow(leftimgarr)
        globalCell[2].ax.imshow(rightimgarr)
        globalCell[1].canvas.show()
        globalCell[2].canvas.show()
        globalCell[3].ax0.clear()
        globalCell[3].ax0.set_xlim(0, 95)
        globalCell[3].ax0.set_ylim(0, 1023)
        globalCell[3].ax0.set_title('96 hue vec')
        globalCell[3].ax0.plot(self.hue_vec, 'r--')
        globalCell[3].canvas.show()

    def on3D(self):
        '''
        TK-based rendering procedure is a bit slow, please be patient
        respond to button:3D, plot 31*41 grid info in 3D format
        '''
        try:
            if self.r_in and self.b_in and self.g_in and self.r_out and self.g_out and self.b_out:
                pass
        except AttributeError:
            print('please select one log file first !')
            return
        cord_x = np.arange(0,41)
        cord_y = np.arange(0,31)
        mesh_x, mesh_y = np.meshgrid(cord_x, cord_y)
        x, y = mesh_x.ravel(), mesh_y.ravel()

        r_in_z = np.array(self.r_in, dtype=np.uint8).ravel()
        g_in_z = np.array(self.g_in, dtype=np.uint8).ravel()
        b_in_z = np.array(self.b_in, dtype=np.uint8).ravel()
        r_out_z = np.array(self.r_out, dtype=np.uint8).ravel()
        g_out_z = np.array(self.g_out, dtype=np.uint8).ravel()
        b_out_z = np.array(self.b_out, dtype=np.uint8).ravel()

        bottom_z = np.zeros_like(r_in_z)


        fig_in = plt.figure(1)
        ax1_red = fig_in.add_subplot(221, projection='3d')
        ax1_red.bar3d(x, y, bottom_z, 1, 1, r_in_z, shade=True)
        ax1_red.set_ylim(31,0)
        ax1_red.set_zlim(0,255)
        ax1_red.set_title('red input info')
        ax1_green = fig_in.add_subplot(222, projection='3d')
        ax1_green.bar3d(x, y, bottom_z, 1, 1, g_in_z, shade=True)
        ax1_green.set_ylim(31,0)
        ax1_green.set_zlim(0,255)
        ax1_green.set_title('green input info')
        ax1_blue =  fig_in.add_subplot(223, projection='3d')
        ax1_blue.bar3d(x, y, bottom_z, 1, 1, b_in_z, shade=True)
        ax1_blue.set_ylim(31,0)
        ax1_blue.set_zlim(0,255)
        ax1_blue.set_title('blue input info')

        fig_out = plt.figure(2)
        ax2_red = fig_out.add_subplot(221, projection='3d')
        ax2_red.bar3d(x, y, bottom_z, 1, 1, r_out_z, shade=True)
        ax2_red.set_ylim(31,0)
        ax2_red.set_zlim(0,255)
        ax2_red.set_title('red output info')
        ax2_green = fig_out.add_subplot(222, projection='3d')
        ax2_green.bar3d(x, y, bottom_z, 1, 1, g_out_z, shade=True)
        ax2_green.set_ylim(31,0)
        ax2_green.set_zlim(0,255)
        ax2_green.set_title('green output info')
        ax2_blue =  fig_out.add_subplot(223, projection='3d')
        ax2_blue.bar3d(x, y, bottom_z, 1, 1, b_out_z, shade=True)
        ax2_blue.set_ylim(31,0)
        ax2_blue.set_zlim(0,255)
        ax2_blue.set_title('blue output info')

        plt.show()

    def __readGridStat(self, filename, r_in_list, g_in_list, b_in_list, r_out_list, g_out_list, b_out_list, hue_vec):
        '''
        read data from log file, if you change PrimerCC_fw debug output format in the furture
        please modify this function corresponded
        '''
        try:
            f_data = open(filename, encoding='utf-8')
        except IOError:
            print('open %s fail.'%filename)
            return False
        a = f_data.readline()
        r_in_flag, r_out_flag, g_in_flag, g_out_flag, b_in_flag, b_out_flag, hue_vec_flag = False, False, False, False, False, False, False
    
        while a!='':
            if a=='OverSat Hist Hue Vec\n':
                for i in range(3):
                    temp_row_data = []
                    a = f_data.readline()
                    row_data = a.split()
                    if len(row_data)!=32:
                        print('row data number !=32')
                        break
                    else:
                        temp_row_data = [int(x) for x in row_data]
                    hue_vec.extend(temp_row_data)
                if len(hue_vec)==96:
                    hue_vec_flag = True
            
            if a=='Red input grid statu data:\n':
                for i in range(31):
                    temp_row_data = []
                    a = f_data.readline()
                    row_data = a.split()
                    if len(row_data)!=41:
                        print('row data number !=41')
                        break
                    else:
                        temp_row_data = [int(x)>>4 for x in row_data]
                    r_in_list.append(temp_row_data)
                if len(r_in_list)==31:
                    r_in_flag = True

            if a=='Green input grid statu data:\n':
                for i in range(31):
                    temp_row_data = []
                    a = f_data.readline()
                    row_data = a.split()
                    if len(row_data)!=41:
                        print('row data number !=41')
                        break
                    else:
                        temp_row_data = [int(x)>>4 for x in row_data]
                    g_in_list.append(temp_row_data)
                if len(g_in_list)==31:
                    g_in_flag = True

            if a=='Blue input grid statu data:\n':
                for i in range(31):
                    temp_row_data = []
                    a = f_data.readline()
                    row_data = a.split()
                    if len(row_data)!=41:
                        print('row data number !=41')
                        break
                    else:
                        temp_row_data = [int(x)>>4 for x in row_data]
                    b_in_list.append(temp_row_data)
                if len(b_in_list)==31:
                    b_in_flag = True

            if a=='Red output grid statu data:\n':
                for i in range(31):
                    temp_row_data = []
                    a = f_data.readline()
                    row_data = a.split()
                    if len(row_data)!=41:
                        print('row data number !=41')
                        break
                    else:
                        temp_row_data = [int(x)>>4 for x in row_data]
                    r_out_list.append(temp_row_data)
                if len(r_out_list)==31:
                    r_out_flag = True

            if a=='Green output grid statu data:\n':
                for i in range(31):
                    temp_row_data = []
                    a = f_data.readline()
                    row_data = a.split()
                    if len(row_data)!=41:
                        print('row data number !=41')
                        break
                    else:
                        temp_row_data = [int(x)>>4 for x in row_data]
                    g_out_list.append(temp_row_data)
                if len(g_in_list)==31:
                    g_out_flag = True

            if a=='Blue output grid statu data:\n':
                for i in range(31):
                    temp_row_data = []
                    a = f_data.readline()
                    row_data = a.split()
                    if len(row_data)!=41:
                        print('row data number !=41')
                        break
                    else:
                        temp_row_data = [int(x)>>4 for x in row_data]
                    b_out_list.append(temp_row_data)
                if len(b_in_list)==31:
                    b_out_flag = True
            a = f_data.readline()
        #print(r_in_flag, r_out_flag, g_in_flag, g_out_flag, b_in_flag, b_out_flag)
        #检查所有数据是否都完成读取
        if r_in_flag==True and b_in_flag==True and g_in_flag==True and r_out_flag==True and g_out_flag==True and b_out_flag==True:
            return True
        else:
            return False
class ExamplePlot(tk.Frame):
    def __init__(self, parent):
        tk.Frame.__init__(self, parent)
        formatter = FuncFormatter(self.down)
        f = Figure()
        self.ax = f.add_subplot(111)
        self.ax.set_xlim(0,410)
        self.ax.set_ylim(310,0)
        self.ax.xaxis.set_major_formatter(formatter)
        self.ax.yaxis.set_major_formatter(formatter)
        #ax.set_title('31*41 rgb grid info')
        self.ax.xaxis.tick_top()
        self.ax.xaxis.set_label_position('top')
        self.ax.title.set_position((0.5,1.06))

        self.canvas = FigureCanvasTkAgg(f, self)
        self.canvas.show()
        self.canvas.get_tk_widget().pack(side=tk.TOP, fill=tk.BOTH, expand=True)

        toolbar = NavigationToolbar2TkAgg(self.canvas, self)
        toolbar.update()
        self.canvas._tkcanvas.pack(side=tk.TOP, fill=tk.BOTH, expand=True)

    def down(self, x, pos):
        return '%d'%(x//10)

class ExampleHSPlot(tk.Frame):
    def __init__(self, parent):
        tk.Frame.__init__(self, parent)
        f = Figure()
        self.ax0 = f.add_subplot(211)
        self.ax0.set_ylim(0,1023)
        self.ax0.set_xlim(0,95)
        self.ax0.set_title('96 hue vec')
        #self.ax0.plot([1,2,3,4],[2,5,4,9])

        self.ax1 = f.add_subplot(212)
        gradient = np.linspace(0,1,96)
        gradient = np.vstack((gradient, gradient))
        self.ax1.imshow(gradient, aspect=2, cmap=plt.get_cmap('hsv'))
        self.ax1.set_xlim(0,95)
        

        x0, y0, w0, h0 = self.ax0.get_position().bounds
        x1, y1, w1, h1 = self.ax1.get_position().bounds

        self.ax0.set_position([x0, y0-0.3, w0, h0+0.3])
        self.ax1.set_position([x1, y1, w1, h1-0.3])

        self.canvas = FigureCanvasTkAgg(f, self)
        self.canvas.show()
        self.canvas.get_tk_widget().pack(side=tk.TOP, fill=tk.BOTH, expand=True)

        toolbar = NavigationToolbar2TkAgg(self.canvas, self)
        toolbar.update()
        self.canvas._tkcanvas.pack(side=tk.TOP, fill=tk.BOTH, expand=True)

globalCell = []
def main():
    root = tk.Tk()
    root.title('RGB grid statu info V1.0.0')
    root.rowconfigure(0, weight=1)
    root.rowconfigure(1, weight=1)
    root.rowconfigure(2, weight=1)
    root.rowconfigure(3, weight=1)
    root.rowconfigure(4, weight=1)
    root.rowconfigure(5, weight=1)
    root.columnconfigure(0, weight=1)
    root.columnconfigure(1, weight=1)
    root.columnconfigure(2, weight=1)
    root.columnconfigure(3, weight=1)
    root.columnconfigure(4, weight=1)
    root.columnconfigure(5, weight=1)
    root.columnconfigure(6, weight=1)
    root.columnconfigure(7, weight=1)
    root.columnconfigure(8, weight=1)
    topCell = Example(root)
    global globalCell
    globalCell.append(topCell)
    topCell.grid(row=0, rowspan=1, column=0, columnspan=9, sticky=tk.W+tk.E+tk.N+tk.S)

    leftCell = ExamplePlot(root)
    globalCell.append(leftCell)
    leftCell.ax.set_title('31*41 rgb grid input info')
    leftCell.grid(row=1, column=0, rowspan=5, columnspan=3, sticky=tk.W+tk.E+tk.N+tk.S)

    rightCell = ExamplePlot(root)
    globalCell.append(rightCell)
    rightCell.ax.set_title('31*41 rgb grid output info')
    rightCell.grid(row=1, column=3, rowspan=5, columnspan=3, sticky=tk.W+tk.E+tk.N+tk.S)

    HSCell = ExampleHSPlot(root)
    globalCell.append(HSCell)
    HSCell.grid(row=1, column=6, rowspan=5, columnspan=3, sticky=tk.E+tk.W+tk.N+tk.S)
    root.mainloop()

if __name__=='__main__':
    main()
